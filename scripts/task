#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
APP_DIR=$(readlink -e $SCRIPT_DIR/..)
API_KEY="$NUGET_KEY"
taskName=$1

case $taskName in
    run)
        dotnet run -p $APP_DIR/thomasjude.core/thomasjude.core.csproj
    ;;
    true-clean)
        projFiles=$(find -type f -name *.csproj)
        projDirs=$(dirname ${projFiles})
        bin_dirs=$(find ${projDirs} -type d -name bin)
        obj_dirs=$(find ${projDirs} -type d -name obj)
        remove_dirs="${bin_dirs} ${obj_dirs}"
        resolved_dirs=

        for dir in ${remove_dirs}; do
            resolved_dirs="${resolved_dirs} $(readlink -m $dir)"
        done
        unset dir

        echo -e "The following directories will be deleted:"
        for dir in ${resolved_dirs}; do
            echo $dir
        done
        unset dir

        read -p "Is this ok? (y/N): " answer
        if [ ${answer} = 'y' ]; then
            echo 'Removing directories...'
            rm -Rf $resolved_dirs
        else
            echo 'Aborting...'
        fi
    ;;
    publish)
        pkgDir="${APP_DIR}/thomasjude.core/bin/Debug"
        latestPkg=$(ls -1t ${pkgDir}/*.nupkg 2> /dev/null | head -n 1)
        if [ ! -z "${latestPkg}" ]; then
            echo "dotnet nuget push $latestPkg --api-key $API_KEY --source https://api.nuget.org/v3/index.json"
            dotnet nuget push $latestPkg --api-key $API_KEY --source https://api.nuget.org/v3/index.json
        else
            echo ".nupkg file does not exist. Please generate .nupkg file and try again"
        fi
        ;;
    *)
        echo 'no task found. skipping...'
    ;;
esac
